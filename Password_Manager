import random
import string
import hashlib
import sys
from getpass import getpass
from utils.dbconfig import dbconfig
from rich import print as printc
from rich.console import Console

console = Console()

def generateDeviceSecret(length=10):
    return ''.join(random.choices(string.ascii_uppercase + string.digits, k=length))

def config():
    
    db = dbconfig()
    if db is None:
        sys.exit(0)
    
    cursor = db.cursor()

    try:
        cursor.execute("CREATE DATABASE IF NOT EXISTS pm")
        printc("[green][+][/green] Database 'pm' created or already exists")
    except Exception as e:
        printc("[red][!] An error occurred while trying to create the database[/red]")
        console.print_exception(show_locals=True)
        sys.exit(0)
  
    db = dbconfig(database='pm')
    if db is None:
        sys.exit(0)
    
    cursor = db.cursor()

    try:
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS secrets (
                masterkey_hash TEXT NOT NULL,
                device_secret TEXT NOT NULL
            )
        """)
        printc("[green][+][/green] Table 'secrets' created or already exists")

        cursor.execute("""
            CREATE TABLE IF NOT EXISTS entries (
                sitename TEXT NOT NULL,
                siteurl TEXT NOT NULL,
                email TEXT,
                username TEXT,
                password TEXT NOT NULL
            )
        """)
        printc("[green][+][/green] Table 'entries' created or already exists")
    except Exception as e:
        printc("[red][!] An error occurred while creating tables[/red]")
        console.print_exception(show_locals=True)
        sys.exit(0)

    
    while True:
        mp = getpass("Choose a MASTER PASSWORD: ")
        if mp == getpass("Re-type: ") and mp != "":
            break
        printc("[yellow][-] Passwords do not match or empty. Please try again.[/yellow]")

    hashed_mp = hashlib.sha256(mp.encode()).hexdigest()
    printc("[green][+][/green] Generated hash of MASTER PASSWORD")

    ds = generateDeviceSecret()
    printc("[green][+][/green] Device Secret Generated")

    try:
        query = "INSERT INTO secrets (masterkey_hash, device_secret) VALUES (%s, %s)"
        val = (hashed_mp, ds)
        cursor.execute(query, val)
        db.commit()
        printc("[green][+][/green] Added to database")
    except Exception as e:
        printc("[red][!] An error occurred while inserting data into the database[/red]")
        console.print_exception(show_locals=True)
        sys.exit(0)

    db.close()
    printc("[green][+] Configuration done! [/green]")

if __name__ == "__main__":
    config()
